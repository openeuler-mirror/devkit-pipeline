##################################################################################
#Function description: An indicator collection tool used for compatibility and performance tests.
#Version information: Copyright © Huawei Technologies Co., Ltd. 2020–2022
#Change history: Modified on 2022-08-17
#Usage: Before performing automatic collection, configure compatibility_testing.conf.
# Enter the name of the application to be tested in application_names.
# Set the command for starting the application to be tested in start_app_commands.
# Set the command for stopping the application to be tested in stop_app_commands.
# Set the command for starting the pressure test tool of the tested application software in start_performance_scripts.
# Confirm the settings.
# On the CentOS, NeoKylin, SUSE, or openEuler operating system, run the sh compatibility_testing.sh
# On the Ubuntu, Kylin, or UOS operating system, run the bash compatibility_testing.sh
# If a cluster contains multiple nodes, configure SSH password-free login for each node and mutual trust between nodes.
# Execute the script on the control node(primary node).
###################################################################################


# Name of the application software to be tested. Use commas (,) to separate multiple application names.
# Run the ps or docker top command to query the background process name in the CMD column.
application_names=
# Command for starting the application software to be tested. Use commas (,) to separate the startup commands of multiple applications.
start_app_commands=
# Command for stopping the application software to be tested. Use commas (,) to separate the stop commands of multiple applications.
stop_app_commands=
# Command for starting the pressure test tool of the tested application software.
start_performance_scripts=
# For Kubernetes cluster, enter Y. For other environments, leave it blank.
kubernetes_env=

# For multi-node cluster deployment, fill in the information as required, which is not required for single-node deployment.
# List of IP addresses in the cluster. Use commas (,) to separate IP addresses from each other. Do not add the IP address of
# the server where the current script is located.
cluster_ip_lists=

# Set this parameter for the Validated certification tests. You do not need to set this parameter for Compatible certification tests.
# CVE vulnerability scan directory. Use commas (,) to separate multiple directories. A CVE vulnerability check tool is already available
# for Validated certification tests. You do not need to set this parameter for Validated certification tests.
# In a cluster, set the directory of the server where the script is not located to 'IP:directory', for example, '192.168.2.2:/root/tomcat'.
cve_scan_path=
# CLamAV antivirus scan directory. Use commas (,) to separate multiple directories. Commercial antivirus software is already available for
# Validated certification tests. You do not need to set this parameter for Validated certification tests.
# In a cluster, set the directory of the server where the script is not located to 'IP:directory', for example, '192.168.2.2:/root/tomcat'.
clamav_scan_path=
